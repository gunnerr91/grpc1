// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using PrayerApiContract;
//
//    var prayerTimes = PrayerTimes.FromJson(jsonString);

using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace PrayerApiContract
{

    public partial class PrayerTimes
    {
        [JsonProperty("code")]
        public long Code { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("results")]
        public Results Results { get; set; }
    }

    public partial class Results
    {
        [JsonProperty("datetime")]
        public List<Datetime> Datetime { get; set; }

        [JsonProperty("location")]
        public Location Location { get; set; }

        [JsonProperty("settings")]
        public Settings Settings { get; set; }
    }

    public partial class Datetime
    {
        [JsonProperty("times")]
        public Times Times { get; set; }

        [JsonProperty("date")]
        public Date Date { get; set; }
    }

    public partial class Date
    {
        [JsonProperty("timestamp")]
        public long Timestamp { get; set; }

        [JsonProperty("gregorian")]
        public DateTimeOffset Gregorian { get; set; }

        [JsonProperty("hijri")]
        public DateTimeOffset Hijri { get; set; }
    }

    public partial class Times
    {
        [JsonProperty("Imsak")]
        public string Imsak { get; set; }

        [JsonProperty("Sunrise")]
        public string Sunrise { get; set; }

        [JsonProperty("Fajr")]
        public string Fajr { get; set; }

        [JsonProperty("Dhuhr")]
        public string Dhuhr { get; set; }

        [JsonProperty("Asr")]
        public string Asr { get; set; }

        [JsonProperty("Sunset")]
        public string Sunset { get; set; }

        [JsonProperty("Maghrib")]
        public string Maghrib { get; set; }

        [JsonProperty("Isha")]
        public string Isha { get; set; }

        [JsonProperty("Midnight")]
        public string Midnight { get; set; }
    }

    public partial class Location
    {
        [JsonProperty("latitude")]
        public double Latitude { get; set; }

        [JsonProperty("longitude")]
        public double Longitude { get; set; }

        [JsonProperty("elevation")]
        public long Elevation { get; set; }

        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("country")]
        public string Country { get; set; }

        [JsonProperty("country_code")]
        public string CountryCode { get; set; }

        [JsonProperty("timezone")]
        public string Timezone { get; set; }

        [JsonProperty("local_offset")]
        public long LocalOffset { get; set; }
    }

    public partial class Settings
    {
        [JsonProperty("timeformat")]
        public string Timeformat { get; set; }

        [JsonProperty("school")]
        public string School { get; set; }

        [JsonProperty("juristic")]
        public string Juristic { get; set; }

        [JsonProperty("highlat")]
        public string Highlat { get; set; }

        [JsonProperty("fajr_angle")]
        public long FajrAngle { get; set; }

        [JsonProperty("isha_angle")]
        public long IshaAngle { get; set; }
    }

    public partial class PrayerTimes
    {
        public static PrayerTimes FromJson(string json) => JsonConvert.DeserializeObject<PrayerTimes>(json, PrayerApiContract.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PrayerTimes self) => JsonConvert.SerializeObject(self, PrayerApiContract.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
